
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Toplevel_C5G_HEX4(

	//////////// CLOCK //////////
	input logic	              		CLOCK_125_p,
	input logic	              		CLOCK_50_B5B,
	input logic	              		CLOCK_50_B6A,
	input logic	              		CLOCK_50_B7A,
	input logic	              		CLOCK_50_B8A,

	//////////// LED //////////
	output logic	     [7:0]		LEDG,
	output logic	     [9:0]		LEDR,

	//////////// KEY //////////
	input logic		          		CPU_RESET_n,
	input logic		     [3:0]		KEY,

	//////////// SW //////////
	input logic		     [9:0]		SW,

	//////////// SEG7 //////////
	output logic	     [6:0]		HEX0,
	output logic	     [6:0]		HEX1,
	output logic	     [6:0]		HEX2,
	output logic	     [6:0]		HEX3
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
    logic                           rst_n;
    logic                           clk50m;
    logic                           crc_start;
    logic                           crc_ok;
    logic                           crc_rdy;
    logic [9:0]                     mem_addr;
    logic [7:0]                     mem_data;
    logic [15:0]                    crc_out;
    logic [15:0]                    crc_out_target;

    


//=======================================================
//  Structural coding
//=======================================================
    // --- Map inputs ---
    assign rst_n = CPU_RESET_n;
    assign clk50m = CLOCK_50_B5B;
    assign crc_start = ~KEY[0];
    
    // --- Map outputs ---
    assign LEDG[0] = crc_ok;
    assign LEDG[7:1] = '0;
    assign LEDR[0] = crc_rdy;
    assign LEDR[9:1] = '0;

    // ---- MEMORY to be checked ----
    rom_data8bit_addr10bit  u1_rom_data8bit_addr10bit(
        .address                    (mem_addr),
        .clock                      (clk50m),
        .q                          (mem_data)
    );
    
    // ---- Target CRC_OUT value ----
    crc_hash_data u1_crc_hash_data(
        .result                     (crc_out_target)
    );
    
    // ---- CRC system that controls the check ----
    crc_system  u1_crc_system(
        .rst_n,
        .clk50m,
        .crc_start,
        .mem_data,
        .crc_out_target,
        .mem_addr,
        .crc_rdy,
        .crc_ok,
        .crc_out
    );
    
    sevenseg    u0_sevenseg(
        .bin                (crc_out[3:0]),
        .sevenseg           (),
        .sevenseg_n         (HEX0)
    );
    sevenseg    u1_sevenseg(
        .bin                (crc_out[7:4]),
        .sevenseg           (),
        .sevenseg_n         (HEX1)
    );
    sevenseg    u2_sevenseg(
        .bin                (crc_out[11:8]),
        .sevenseg           (),
        .sevenseg_n         (HEX2)
    );
    sevenseg    u3_sevenseg(
        .bin                (crc_out[15:12]),
        .sevenseg           (),
        .sevenseg_n         (HEX3)
    );

endmodule
